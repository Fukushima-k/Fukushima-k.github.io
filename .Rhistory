ndist=1) # distructor数
# 各項目の正答確率
prob_nitem <- c(0.7, 0.4)
knowledge <- Construct_K(prob_nitem)
response <- generate_X_given_knowledge(knowledge, param_j)
response$cond_prob
K_prior = rep(1/4, 4)
joint_prob = response$cond_prob
joint_prob = response$cond_prob %>% `rownames<-`(apply(response$X, 1, paste0, collapse=""))
for(i in 1:nrow(joint_prob)) joint_prob[i, ] = response$cond_prob [i, ]* K_prior
posterior = joint_prob
for(i in 1:nrow(joint_prob)) posterior[i, ] = joint_prob[i, ]/sum(joint_prob[i,])
posterior*100 %>% round(1)
cond_prob_X_given_K = response$cond_prob %>% `rownames<-`(apply(response$X, 1, paste0, collapse = ""))
matching_fk_lpmf_simple = function(resp, nitem, ndist, theta){
param_j <- list(nitem=nitem, # 項目数
ndist=ndist) # distructor数
item_p = sapply(1:nitem, function(x)logistic_prob(1, theta))
knowledge <- Construct_K(item_p)
response <- generate_X_given_knowledge(knowledge, param_j)
index = match(paste0(resp, collapse = ""), apply(response$Y, 1, paste0, collapse=""))
log(response$cond_prob[index, ] %*% rev(wlord_fukushima(item_p)))
}
matching_lpmf <- function(resp, nitem, ndist, item_p) {
log_prob <- 0
log_pmf <- numeric(nitem+1)
correct_item_p <- numeric(nitem)
nstate <- 1
for (i in 1:nitem){
if (resp[i] == 1) {
correct_item_p[nstate] = item_p[i];
nstate = nstate + 1;
} else {
log_prob = log_prob + log(1-item_p[i]);
}
}
nright = nstate - 1;
if (nright > 0) {
log_pmf[1:nstate] = log(rev(wlord(correct_item_p[1:nright])))
for( k in 1:nstate ) {
# log_pmf[k] = log_pmf[k] - log(gamma(nitem + ndist - k + 2))
log_pmf[k] = log_pmf[k] - log(gamma(nitem + ndist - k + 2)) + log(gamma(ndist+1))
}
log_prob = log_prob + log_sum_exp(log_pmf[1:nstate]);
}
if(nright == 0){ # ここも追加です。
log_prob = log_prob - log(gamma(nitem + ndist - 1 + 2)) + log(gamma(ndist+1))
}
return(log_prob)
}
log_sum_exp <- function(vec){
log(sum(exp(vec)))
}
# matching_lpmf <- mod$functions$matching_lpmf
matching_zg_lpmf_simple = function(resp, nitem, ndist, theta){
item_p = sapply(1:nitem, function(x)logistic_prob(1, theta))
matching_lpmf(resp, nitem = nitem, ndist = ndist, item_p)
}
theta = seq(-4,4,0.1)
loglik_fk = sapply(theta, function(x)matching_fk_lpmf_simple(c(1, 0, 1), nitem=3, ndist=1, theta = x))
loglik_zg = sapply(theta, function(x)matching_zg_lpmf_simple(c(1, 0, 1), nitem=3, ndist=1, theta = x))
round(loglik_fk - loglik_zg, 3)
plot(theta, exp(loglik_fk), type = "l", col = "red"); lines(theta, exp(loglik_zg))
plot(theta, exp(loglik_fk), type = "l", col = "red",width=3); lines(theta, exp(loglik_zg))
plot(theta, exp(loglik_fk), col = "red"); lines(theta, exp(loglik_zg))
theta = seq(-4,4,0.1)
theta = seq(-4,4,0.1)
loglik_fk = sapply(theta, function(x){
matching_fk_lpmf_simple(c(1, 0, 1), nitem=3, ndist=1, theta = x) +
log(dnorm(x, mean=0, sd=1))}
)
plot(theta, exp(loglik_fk), col = "red");
plot(theta, exp(loglik_fk), col = "red", type = "l");
loglik_pr = sapply(theta, function(x)
log(dnorm(x, mean=0, sd=1))}
loglik_pr = sapply(theta, function(x)
log(dnorm(x, mean=0, sd=1))
)
lines(theta, exp(loglik_pr))
theta = seq(-4,4,0.1)
loglik_fk = sapply(theta, function(x){
matching_fk_lpmf_simple(c(1, 0, 1), nitem=3, ndist=1, theta = x) +
log(dnorm(x, mean=0, sd=1))}
)
loglik_pr = sapply(theta, function(x)
log(dnorm(x, mean=0, sd=1))
)
plot(theta, exp(loglik_fk), col = "red", type = "l");
lines(theta, exp(loglik_pr))
plot(theta, exp(loglik_fk), col = "red", type = "l");lines(theta, exp(loglik_pr))
plot(theta, exp(loglik_fk)*5, col = "red", type = "l");lines(theta, exp(loglik_pr))
plot(theta, exp(loglik_fk)*10, col = "red", type = "l");lines(theta, exp(loglik_pr))
loglik_fk = sapply(theta, function(x){
matching_fk_lpmf_simple(c(1, 0, 0, 1, 1, 1, 0, 1,1, 1), nitem=10, ndist=1, theta = x) +
log(dnorm(x, mean=0, sd=1))}
)
theta = seq(-4,4,0.1)
loglik_fk = sapply(theta, function(x){
matching_fk_lpmf_simple(c(1, 0, 1, 1, 1), nitem=5, ndist=1, theta = x) +
log(dnorm(x, mean=0, sd=1))}
)
loglik_pr = sapply(theta, function(x)
log(dnorm(x, mean=0, sd=1))
)
plot(theta, exp(loglik_fk)*10, col = "red", type = "l");lines(theta, exp(loglik_pr))
plot(theta, exp(loglik_fk)*15, col = "red", type = "l");lines(theta, exp(loglik_pr))
plot(theta, exp(loglik_fk)*20, col = "red", type = "l");lines(theta, exp(loglik_pr))
plot(theta, exp(loglik_fk)*23, col = "red", type = "l");lines(theta, exp(loglik_pr))
196000/ 23000
196000 -23000 * 7
196000 - 23000 * 8
6000*14
6000*10
nitto = function(x, y){
6000*x + 4500* y - 64500
}
nitto(10, 1)
expand.grid(list(1:10, 1))
expand.grid(list(1:10, 1:7))
patt <- expand.grid(list(1:10, 1:7))
nitto = function(x){
6000*x[1] + 4500*x[2] - 64500
}
nitto(c(10, 1))
patt <- expand.grid(list(1:10, 1:7))
apply(patt, 1, nitto)
apply(patt, 1, nitto) == 0
patt[apply(patt, 1, nitto) == 0, ]
shukuhaku <- function(x){
23000*x[1] + 13000*x[2] - 196000
}
patt[apply(patt, 1, shukuhaku) == 0, ]
apply(patt, 1, shukuhaku)
patt[apply(patt, 1, shukuhaku) <= 4000, ]
patt[apply(patt, 1, shukuhaku) <= 3000, ]
patt[apply(patt, 1, shukuhaku) <= 2000, ]
patt[apply(patt, 1, shukuhaku) <= 1000, ]
patt[apply(patt, 1, shukuhaku) <= 0000, ]
patt[apply(patt, 1, shukuhaku) <= 0000, ]
apply(patt, 1, shukuhaku) <= 0000
apply(patt, 1, shukuhaku)
patt[abs(apply(patt, 1, shukuhaku)) <= 3000, ]
patt[abs(apply(patt, 1, shukuhaku)) <= 3000, ]
patt[abs(apply(patt, 1, shukuhaku)) <= 3000, ]
patt[abs(apply(patt, 1, shukuhaku)) <= 3000, ]
patt <- expand.grid(list(1:10, 1:10))
patt[apply(patt, 1, nitto) == 0, ]
patt[abs(apply(patt, 1, shukuhaku)) <= 3000, ]
patt <- expand.grid(list(1:12, 1:12))
patt[apply(patt, 1, nitto) == 0, ]
patt[abs(apply(patt, 1, shukuhaku)) <= 3000, ]
patt[abs(apply(patt, 1, shukuhaku)) <= 000, ]
abs(apply(patt, 1, shukuhaku))
patt[apply(patt, 1, nitto) == 0, ]
patt[abs(apply(patt, 1, shukuhaku)) <= 000, ]
patt[apply(patt, 1, nitto) == 0, ]
patt[abs(apply(patt, 1, shukuhaku)) <= 000, ]
177949/13
177949/13*3
# install.packages("remotes")
remotes::install_github("ykunisato/jpaRmd")
# install.packages("remotes")
remotes::install_github("ykunisato/jpaRmd")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(dev = "cairo_pdf", dev.args = list(family = "ipaexg"))
diag(a)
a <- 3
diag(a)
diag(a) - 1/a
Sigma <- diag(a) - 1/a
Sigma
eigen(Sigma)
EIGEN <- eigen(Sigma)
EIGEN
round(EIGEN$values, 10)
I_a <-  round(EIGEN$values, 10)
I_a
EIGEN$vectors[, -a]
Q_a <- EIGEN$vectors[, -a]
Q_a
diag(a-1)
Q_a %*% diag(a-1) %*% t(Q_a)
Sigma
Q_a %*% diag(a-1) %*% t(Q_a) == Sigma
Mat_for_fixed <- function(a){
a <- 3
Sigma <- diag(a) - 1/a
EIGEN <- eigen(Sigma)
# I_a <-  round(EIGEN$values, 10)
Q_a <- EIGEN$vectors[, -a]
# Q_a %*% diag(a-1) %*% t(Q_a)
return(list(Sigma = Sigma, Q = Q))
}
Mat_for_fixed(5)
Mat_for_fixed <- function(a){
a <- 3
Sigma <- diag(a) - 1/a
EIGEN <- eigen(Sigma)
# I_a <-  round(EIGEN$values, 10)
Q_a <- EIGEN$vectors[, -a]
# Q_a %*% diag(a-1) %*% t(Q_a)
return(list(Sigma = Sigma, Q = Q_a))
}
Mat_for_fixed(5)
Mat_for_fixed <- function(a){
Sigma <- diag(a) - 1/a
EIGEN <- eigen(Sigma)
# I_a <-  round(EIGEN$values, 10)
Q_a <- EIGEN$vectors[, -a]
# Q_a %*% diag(a-1) %*% t(Q_a)
return(list(Sigma = Sigma, Q = Q_a))
}
Mat_for_fixed(5)
Mat_for_fixed(2)
Mat_for_fixed <- function(a){
Sigma <- diag(a) - 1/a
EIGEN <- eigen(Sigma)
# I_a <-  round(EIGEN$values, 10)
Q_a <- EIGEN$vectors[, -a, collapse = FALSE]
# Q_a %*% diag(a-1) %*% t(Q_a)
return(list(Sigma = Sigma, Q = Q_a))
}
Mat_for_fixed(2)
a <- 2
Sigma <- diag(a) - 1/a
EIGEN <- eigen(Sigma)
EIGEN
# I_a <-  round(EIGEN$values, 10)
Q_a <- EIGEN$vectors[, -a, collapse = FALSE]
# I_a <-  round(EIGEN$values, 10)
Q_a <- EIGEN$vectors[, -a]
# I_a <-  round(EIGEN$values, 10)
(Q_a <- EIGEN$vectors[, -a])
# I_a <-  round(EIGEN$values, 10)
(Q_a <- EIGEN$vectors[, -a, drop=F])
Mat_for_fixed <- function(a){
Sigma <- diag(a) - 1/a
EIGEN <- eigen(Sigma)
# I_a <-  round(EIGEN$values, 10)
(Q_a <- EIGEN$vectors[, -a, drop=F])
# Q_a %*% diag(a-1) %*% t(Q_a)
return(list(Sigma = Sigma, Q = Q_a))
}
Mat_for_fixed(2)
Mat_for_fixed(5)
a <- 5
Sigma <- diag(a) - 1/a
EIGEN <- eigen(Sigma)
# I_a <-  round(EIGEN$values, 10)
(Q_a <- EIGEN$vectors[, -a, drop=F])
EIGEN
(Q_a <- EIGEN$vectors[, -a, drop=F])
Q_a %*% diag(a-1) %*% t(Q_a)
EIGEN <- eigen(Sigma)
I_a <-  round(EIGEN$values, 10)
(Q_a <- EIGEN$vectors[, -a, drop=F])
Q_a %*% diag(a-1) %*% t(Q_a)
Sigma <- diag(a) - 1/a
EIGEN <- eigen(Sigma)
I_a <-  round(EIGEN$values, 10)
(Q_a <- EIGEN$vectors[, -a, drop=F])
t(Q_a)%*% Q_a
round(t(Q_a)%*% Q_a)
round(t(Q_a)%*% Q_a)
pacman::p_load(pracma)
pracma::gramSchmidt(Q_a)
Q_a
pracma::gramSchmidt(Q_a)
Q_a
pracma::gramSchmidt(Q_a)$R
Q_a %*%
pracma::gramSchmidt(Q_a)$R
Q_a %*% pracma::gramSchmidt(Q_a)$R
Q_a %*% t(pracma::gramSchmidt(Q_a)$R)
R
Q_a %*%
pracma::gramSchmidt(Q_a)$R
# Q_a %*%
pracma::gramSchmidt(Q_a)$R
# Q_a %*%
pracma::gramSchmidt(Q_a)$R %>% round(10)
pacman::p_load(pracma, tidyverse)
# Q_a %*%
pracma::gramSchmidt(Q_a)$R %>% round(10)
source("~/.active-rstudio-document", echo=TRUE)
tinytex::reinstall_tinytex(repository = "illinois")
---
title: "Untitled"
seikyou.kakaku <- function(x,
kakaku = c("amazon", "hontai"),
discount = 10,
tax = 10){
kakaku <- match.arg(kakaku)
if(kakaku == "amazon"){
x <- x/(1 + tax * 0.01)
}
(x - (x * discount * 0.01 )) * (1 + tax * 0.01)
}
seikyou.kakaku(x, kakaku = "amazon")
hontai = 10000
hontai - hontai * 0.1
(hontai - hontai * 0.1)) * (1.1)
(hontai - hontai * 0.1) * 1.1
seikyou.kakaku(100, kakaku = "amazon")
seikyou.kakaku(10000, kakaku = "amazon")
seikyou.kakaku(10000, kakaku = "ama")
seikyou.kakaku(10000, kakaku = "gs")
seikyou.kakaku(10000, )
seikyou.kakaku(10000, )
match.arg
set.seed(123)  # 再現性のためのシード設定
# パラメータの設定
I <- 10  # アイテム数
J <- 100  # 回答者数
K <- 3  # 属性数
C <- 4  # 属性プロファイル（潜在クラス）数
# 潜在クラスのメンバーシップ確率
nu <- runif(C)
nu <- nu / sum(nu)  # 確率が1になるように正規化
nu
# 属性プロファイルマトリックス (C x K)
alpha <- matrix(sample(c(0, 1), C * K, replace = TRUE), nrow = C, ncol = K)
# 潜在クラスごとの属性習得インジケータ (I x C)
xi <- matrix(sample(c(0, 1), I * C, replace = TRUE), nrow = I, ncol = C)
# SlipパラメータとGuessパラメータ (I個のベクトル)
slip <- rbeta(I, 5, 25)
guess <- rbeta(I, 5, 25)
# 回答マトリックス (J x I)
y <- matrix(0, nrow = J, ncol = I)
# 各回答者がどの潜在クラスに属するかを決定
latent_class <- sample(1:C, J, replace = TRUE, prob = nu)
# 各回答者に対する回答データを生成
for (j in 1:J) {
for (i in 1:I) {
# 潜在クラスに基づいた正解確率 pi の計算
c <- latent_class[j]
pi <- (1 - slip[i])^xi[i, c] * guess[i]^(1 - xi[i, c])
# Bernoulli分布に基づいて回答データを生成
y[j, i] <- rbinom(1, 1, pi)
}
}
# Stanコードに渡すリスト形式のデータ
stan_data <- list(
I = I,
J = J,
K = K,
C = C,
y = y,
alpha = alpha,
xi = xi
)
# データの構造確認
str(stan_data)
stan_data
# generate_html.R
# 必要なパッケージをロード
# install.packages("stringr") # 未インストールの場合はコメントを外す
library(stringr)
# setwd("C:/Users/muphy/マイドライブ/012myhomepage_github/新しい頁/new/R")
setwd("C:/Users/muphy/マイドライブ/012myhomepage_github/")
# ヘッダーとフッターを読み込み
header_template <- readLines("templete/header.html", encoding = "UTF-8")
footer_template <- readLines("templete/footer.html", encoding = "UTF-8")
html_url <- function(url, text, doi = FALSE){
if(doi) url <- sprintf("https://doi.org/%s", url)
if(missing(text)){
text <- url
}
sprintf('<a href="%s">%s</a>', url, text)
}
# news の管理
# ニュースデータ
news_data <- list(
list(
title = "新しいホームページを公開しました。",
date = "2024-07",
content = paste0("新しいホームページを公開しました。それに伴い、旧ホームぺージは公開を停止しました。")
),
list(
title = "共同研究を開始しました。",
date = "2024-06",
content = "外部機関との共同研究を開始しました。今後、公開予定です。"
),
list(
title = "論文が採択されました。",
date = "2024-05",
content =
paste0("<i>Journal of Educational and Behavioral Statistics</i>誌に採択された論文がOnlineFirstで公開されました。", html_url("https://doi.org/10.3102/10769986241245707"))
),
list(
title = "賞を受賞しました。",
date = "2023-11",
content = "日本計算機統計学会 第37回シンポジウムにて「一般化多枝選択型認知診断モデルの提案」の題目で学生研究発表賞をいただきました。ありがとうございます。"
),
list(
title = "preprintを公開しました。",
date = "2023-07",
content = paste0("Open Science Frameworkにて、preprint \"<i>Modeling Partial Knowledge in Multiple-Choice Cognitive Diagnostic Assessment.</i>\" を公開しました。", html_url("https://doi.org/10.31234/osf.io/wefb7"))
)
# 他のニュース項目を追加
)
# ニュース項目をHTMLリストとして生成
generate_news_list <- function(news_items) {
unlist(lapply(news_items, function(item) {
paste0(
'<li class="list-group-item">',
'<h5>', item$title, '</h5>',
'<small>投稿日: ', item$date, '</small>',
'<p>', item$content, '</p>',
'</li>'
)
}))
}
# ニュースページのコンテンツ
news_page_content <- c(
'<h2>ニュース</h2>',
'<ul class="list-group">',
generate_news_list(news_data),
'</ul>'
)
# ニュースページのコンテンツファイルに書き込み
writeLines(news_page_content, "contents/news_content.html")
# 最新の3件を取得
latest_news <- news_data[1:min(3, length(news_data))]
# トップページのニュースセクション
index_news_content <- c(
'<h2>最新のニュース</h2>',
'<ul class="list-group">',
generate_news_list(latest_news),
'</ul>',
'<a href="news.html" class="btn btn-secondary mt-3">すべてのニュースを見る</a>'
)
# トップページのコンテンツファイル（例: contents/index_content.html）に埋め込む
# プレースホルダーを使用して、ニュースセクションを挿入
index_content <- readLines("contents/index_content_news_plus.html", encoding = "UTF-8")
index_content <- str_replace(index_content, fixed("{{news_section}}"), paste(index_news_content, collapse = "\n"))
writeLines(index_content, "contents/index_content_news_plus_written.html", useBytes = TRUE)
# ページ情報のリストを作成
pages <- list(
list(
filename = "index.html",
title = "福島健太郎のホームページ - ホーム",
# content_file = "contents/index_content.html",
content_file = "contents/index_content_news_plus_written.html",
active_menu = "home"
),
list(
filename = "about.html",
title = "福島健太郎のホームページ - 自己紹介",
content_file = "contents/about_content.html",
active_menu = "about"
),
list(
filename = "research.html",
title = "福島健太郎のホームページ - 研究内容",
content_file = "contents/research_content.html",
active_menu = "research"
),
list(
filename = "publications.html",
title = "福島健太郎のホームページ - 業績一覧",
content_file = "contents/publications_content.html",
active_menu = "publications"
),
list(
filename = "news.html",
title = "福島健太郎のホームページ - ニュース",
content_file = "contents/news_content.html",
active_menu = "news"
),
# list(
#   filename = "blog.html",
#   title = "福島健太郎のホームページ - ブログ",
#   content_file = "contents/blog_content.html",
#   active_menu = "blog"
# ),
list(
filename = "index_en.html",
title = "English Version - Coming Soon",
content_file = "contents/index_en_content.html",
active_menu = ""  # ヘッダーにリンクを追加しないため、active_menu は空にします
),
list(
filename = "contact.html",
title = "福島健太郎のホームページ - お問い合わせ",
content_file = "contents/contact_content.html",
active_menu = "contact"
)
)
# 各ページのHTMLを生成
for (page in pages) {
# ヘッダーのテンプレートにタイトルを挿入
header <- str_replace_all(header_template, fixed("{{title}}"), page$title)
# アクティブなメニューを設定
menu_items <- c("home", "about", "research", "publications", "news", "contact")
for (item in menu_items) {
if (item == page$active_menu) {
header <- str_replace_all(header, fixed(paste0("{{active_", item, "}}")), "active")
} else {
header <- str_replace_all(header, fixed(paste0("{{active_", item, "}}")), "")
}
}
# コンテンツを読み込み
content <- readLines(page$content_file, encoding = "UTF-8")
# フッターをそのまま使用
footer <- footer_template
# 最終的なHTMLを組み立て
html <- c(header, content, footer)
# ファイルに書き込み
writeLines(html, page$filename, useBytes = TRUE)
cat("Generated:", page$filename, "\n")
}
